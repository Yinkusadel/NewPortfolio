/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Postgresql specific attributes not covered by semantic conventions\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"PG_VALUES\"] = \"db.postgresql.values\";\n    AttributeNames[\"PG_PLAN\"] = \"db.postgresql.plan\";\n    AttributeNames[\"IDLE_TIMEOUT_MILLIS\"] = \"db.postgresql.idle.timeout.millis\";\n    AttributeNames[\"MAX_CLIENT\"] = \"db.postgresql.max.client\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcz83YzQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBQb3N0Z3Jlc3FsIHNwZWNpZmljIGF0dHJpYnV0ZXMgbm90IGNvdmVyZWQgYnkgc2VtYW50aWMgY29udmVudGlvbnNcbnZhciBBdHRyaWJ1dGVOYW1lcztcbihmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBHX1ZBTFVFU1wiXSA9IFwiZGIucG9zdGdyZXNxbC52YWx1ZXNcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBHX1BMQU5cIl0gPSBcImRiLnBvc3RncmVzcWwucGxhblwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSURMRV9USU1FT1VUX01JTExJU1wiXSA9IFwiZGIucG9zdGdyZXNxbC5pZGxlLnRpbWVvdXQubWlsbGlzXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJNQVhfQ0xJRU5UXCJdID0gXCJkYi5wb3N0Z3Jlc3FsLm1heC5jbGllbnRcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpanNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Contains span names produced by instrumentation\nvar SpanNames;\n(function (SpanNames) {\n    SpanNames[\"QUERY_PREFIX\"] = \"pg.query\";\n    SpanNames[\"CONNECT\"] = \"pg.connect\";\n    SpanNames[\"POOL_CONNECT\"] = \"pg-pool.connect\";\n})(SpanNames = exports.SpanNames || (exports.SpanNames = {}));\n//# sourceMappingURL=SpanNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvU3Bhbk5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQyxpQkFBaUIsS0FBSztBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2VudW1zL1NwYW5OYW1lcy5qcz9kZTRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TcGFuTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gQ29udGFpbnMgc3BhbiBuYW1lcyBwcm9kdWNlZCBieSBpbnN0cnVtZW50YXRpb25cbnZhciBTcGFuTmFtZXM7XG4oZnVuY3Rpb24gKFNwYW5OYW1lcykge1xuICAgIFNwYW5OYW1lc1tcIlFVRVJZX1BSRUZJWFwiXSA9IFwicGcucXVlcnlcIjtcbiAgICBTcGFuTmFtZXNbXCJDT05ORUNUXCJdID0gXCJwZy5jb25uZWN0XCI7XG4gICAgU3Bhbk5hbWVzW1wiUE9PTF9DT05ORUNUXCJdID0gXCJwZy1wb29sLmNvbm5lY3RcIjtcbn0pKFNwYW5OYW1lcyA9IGV4cG9ydHMuU3Bhbk5hbWVzIHx8IChleHBvcnRzLlNwYW5OYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGFuTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js ***!
  \****************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxtTUFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLCtLQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyw2TUFBd0I7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy9pbmRleC5qcz9jMDc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy90eXBlcy5qcz9jYWUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isObjectWithTextString = exports.getErrorMessage = exports.patchClientConnectCallback = exports.patchCallbackPGPool = exports.patchCallback = exports.handleExecutionResult = exports.handleConfigQuery = exports.shouldSkipInstrumentation = exports.getSemanticAttributesFromPool = exports.getSemanticAttributesFromConnection = exports.getConnectionString = exports.getQuerySpanName = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\n/**\n * Helper function to get a low cardinality span name from whatever info we have\n * about the query.\n *\n * This is tricky, because we don't have most of the information (table name,\n * operation name, etc) the spec recommends using to build a low-cardinality\n * value w/o parsing. So, we use db.name and assume that, if the query's a named\n * prepared statement, those `name` values will be low cardinality. If we don't\n * have a named prepared statement, we try to parse an operation (despite the\n * spec's warnings).\n *\n * @params dbName The name of the db against which this query is being issued,\n *   which could be missing if no db name was given at the time that the\n *   connection was established.\n * @params queryConfig Information we have about the query being issued, typed\n *   to reflect only the validation we've actually done on the args to\n *   `client.query()`. This will be undefined if `client.query()` was called\n *   with invalid arguments.\n */\nfunction getQuerySpanName(dbName, queryConfig) {\n    // NB: when the query config is invalid, we omit the dbName too, so that\n    // someone (or some tool) reading the span name doesn't misinterpret the\n    // dbName as being a prepared statement or sql commit name.\n    if (!queryConfig)\n        return SpanNames_1.SpanNames.QUERY_PREFIX;\n    // Either the name of a prepared statement; or an attempted parse\n    // of the SQL command, normalized to uppercase; or unknown.\n    const command = typeof queryConfig.name === 'string' && queryConfig.name\n        ? queryConfig.name\n        : parseNormalizedOperationName(queryConfig.text);\n    return `${SpanNames_1.SpanNames.QUERY_PREFIX}:${command}${dbName ? ` ${dbName}` : ''}`;\n}\nexports.getQuerySpanName = getQuerySpanName;\nfunction parseNormalizedOperationName(queryText) {\n    const indexOfFirstSpace = queryText.indexOf(' ');\n    let sqlCommand = indexOfFirstSpace === -1\n        ? queryText\n        : queryText.slice(0, indexOfFirstSpace);\n    sqlCommand = sqlCommand.toUpperCase();\n    // Handle query text being \"COMMIT;\", which has an extra semicolon before the space.\n    return sqlCommand.endsWith(';') ? sqlCommand.slice(0, -1) : sqlCommand;\n}\nfunction getConnectionString(params) {\n    const host = params.host || 'localhost';\n    const port = params.port || 5432;\n    const database = params.database || '';\n    return `postgresql://${host}:${port}/${database}`;\n}\nexports.getConnectionString = getConnectionString;\nfunction getPort(port) {\n    // Port may be NaN as parseInt() is used on the value, passing null will result in NaN being parsed.\n    // https://github.com/brianc/node-postgres/blob/2a8efbee09a284be12748ed3962bc9b816965e36/packages/pg/lib/connection-parameters.js#L66\n    if (Number.isInteger(port)) {\n        return port;\n    }\n    // Unable to find the default used in pg code, so falling back to 'undefined'.\n    return undefined;\n}\nfunction getSemanticAttributesFromConnection(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n    };\n}\nexports.getSemanticAttributesFromConnection = getSemanticAttributesFromConnection;\nfunction getSemanticAttributesFromPool(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n        [AttributeNames_1.AttributeNames.IDLE_TIMEOUT_MILLIS]: params.idleTimeoutMillis,\n        [AttributeNames_1.AttributeNames.MAX_CLIENT]: params.maxClient,\n    };\n}\nexports.getSemanticAttributesFromPool = getSemanticAttributesFromPool;\nfunction shouldSkipInstrumentation(instrumentationConfig) {\n    return (instrumentationConfig.requireParentSpan === true &&\n        api_1.trace.getSpan(api_1.context.active()) === undefined);\n}\nexports.shouldSkipInstrumentation = shouldSkipInstrumentation;\n// Create a span from our normalized queryConfig object,\n// or return a basic span if no queryConfig was given/could be created.\nfunction handleConfigQuery(tracer, instrumentationConfig, queryConfig) {\n    // Create child span.\n    const { connectionParameters } = this;\n    const dbName = connectionParameters.database;\n    const spanName = getQuerySpanName(dbName, queryConfig);\n    const span = tracer.startSpan(spanName, {\n        kind: api_1.SpanKind.CLIENT,\n        attributes: getSemanticAttributesFromConnection(connectionParameters),\n    });\n    if (!queryConfig) {\n        return span;\n    }\n    // Set attributes\n    if (queryConfig.text) {\n        span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, queryConfig.text);\n    }\n    if (instrumentationConfig.enhancedDatabaseReporting &&\n        Array.isArray(queryConfig.values)) {\n        try {\n            const convertedValues = queryConfig.values.map(value => {\n                if (value == null) {\n                    return 'null';\n                }\n                else if (value instanceof Buffer) {\n                    return value.toString();\n                }\n                else if (typeof value === 'object') {\n                    if (typeof value.toPostgres === 'function') {\n                        return value.toPostgres();\n                    }\n                    return JSON.stringify(value);\n                }\n                else {\n                    //string, number\n                    return value.toString();\n                }\n            });\n            span.setAttribute(AttributeNames_1.AttributeNames.PG_VALUES, convertedValues);\n        }\n        catch (e) {\n            api_1.diag.error('failed to stringify ', queryConfig.values, e);\n        }\n    }\n    // Set plan name attribute, if present\n    if (typeof queryConfig.name === 'string') {\n        span.setAttribute(AttributeNames_1.AttributeNames.PG_PLAN, queryConfig.name);\n    }\n    return span;\n}\nexports.handleConfigQuery = handleConfigQuery;\nfunction handleExecutionResult(config, span, pgResult) {\n    if (typeof config.responseHook === 'function') {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            config.responseHook(span, {\n                data: pgResult,\n            });\n        }, err => {\n            if (err) {\n                api_1.diag.error('Error running response hook', err);\n            }\n        }, true);\n    }\n}\nexports.handleExecutionResult = handleExecutionResult;\nfunction patchCallback(instrumentationConfig, span, cb) {\n    return function patchedCallback(err, res) {\n        if (err) {\n            // span.recordException(err);\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        else {\n            handleExecutionResult(instrumentationConfig, span, res);\n        }\n        span.end();\n        cb.call(this, err, res);\n    };\n}\nexports.patchCallback = patchCallback;\nfunction patchCallbackPGPool(span, cb) {\n    return function patchedCallback(err, res, done) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.call(this, err, res, done);\n    };\n}\nexports.patchCallbackPGPool = patchCallbackPGPool;\nfunction patchClientConnectCallback(span, cb) {\n    return function patchedClientConnectCallback(err) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.apply(this, arguments);\n    };\n}\nexports.patchClientConnectCallback = patchClientConnectCallback;\n/**\n * Attempt to get a message string from a thrown value, while being quite\n * defensive, to recognize the fact that, in JS, any kind of value (even\n * primitives) can be thrown.\n */\nfunction getErrorMessage(e) {\n    return typeof e === 'object' && e !== null && 'message' in e\n        ? String(e.message)\n        : undefined;\n}\nexports.getErrorMessage = getErrorMessage;\nfunction isObjectWithTextString(it) {\n    var _a;\n    return (typeof it === 'object' &&\n        typeof ((_a = it) === null || _a === void 0 ? void 0 : _a.text) === 'string');\n}\nexports.isObjectWithTextString = isObjectWithTextString;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.43.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-pg';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdmVyc2lvbi5qcz9mY2IyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNDMuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _sentryCollisionFreeGlobalObject = typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : {};\n_sentryCollisionFreeGlobalObject[\"__sentryRewritesTunnelPath__\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"SENTRY_RELEASE\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__sentryBasePath\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__rewriteFramesDistDir__\"] = \".next\";\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PgInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\");\nconst sql_common_1 = __webpack_require__(/*! @opentelemetry/sql-common */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+sql-common@0.40.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/build/src/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\nclass PgInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        const modulePG = new instrumentation_1.InstrumentationNodeModuleDefinition('pg', ['>=8.0.0 <9'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.query)) {\n                this._unwrap(moduleExports.Client.prototype, 'query');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.connect)) {\n                this._unwrap(moduleExports.Client.prototype, 'connect');\n            }\n            this._wrap(moduleExports.Client.prototype, 'query', this._getClientQueryPatch());\n            this._wrap(moduleExports.Client.prototype, 'connect', this._getClientConnectPatch());\n            return module;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.query)) {\n                this._unwrap(moduleExports.Client.prototype, 'query');\n            }\n        });\n        const modulePGPool = new instrumentation_1.InstrumentationNodeModuleDefinition('pg-pool', ['>=2.0.0 <4'], (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n            this._wrap(moduleExports.prototype, 'connect', this._getPoolConnectPatch());\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n        });\n        return [modulePG, modulePGPool];\n    }\n    setConfig(config = {}) {\n        this._config = Object.assign({}, config);\n    }\n    getConfig() {\n        return this._config;\n    }\n    _getClientConnectPatch() {\n        const plugin = this;\n        return (original) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.call(this, callback);\n                }\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromConnection(this),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchClientConnectCallback(span, callback);\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n    _getClientQueryPatch() {\n        const plugin = this;\n        return (original) => {\n            this._diag.debug('Patching pg.Client.prototype.query');\n            return function query(...args) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.apply(this, args);\n                }\n                // client.query(text, cb?), client.query(text, values, cb?), and\n                // client.query(configObj, cb?) are all valid signatures. We construct\n                // a queryConfig obj from all (valid) signatures to build the span in a\n                // unified way. We verify that we at least have query text, and code\n                // defensively when dealing with `queryConfig` after that (to handle all\n                // the other invalid cases, like a non-array for values being provided).\n                // The type casts here reflect only what we've actually validated.\n                const arg0 = args[0];\n                const firstArgIsString = typeof arg0 === 'string';\n                const firstArgIsQueryObjectWithText = utils.isObjectWithTextString(arg0);\n                // TODO: remove the `as ...` casts below when the TS version is upgraded.\n                // Newer TS versions will use the result of firstArgIsQueryObjectWithText\n                // to properly narrow arg0, but TS 4.3.5 does not.\n                const queryConfig = firstArgIsString\n                    ? {\n                        text: arg0,\n                        values: Array.isArray(args[1]) ? args[1] : undefined,\n                    }\n                    : firstArgIsQueryObjectWithText\n                        ? arg0\n                        : undefined;\n                const instrumentationConfig = plugin.getConfig();\n                const span = utils.handleConfigQuery.call(this, plugin.tracer, instrumentationConfig, queryConfig);\n                // Modify query text w/ a tracing comment before invoking original for\n                // tracing, but only if args[0] has one of our expected shapes.\n                if (instrumentationConfig.addSqlCommenterCommentToQueries) {\n                    args[0] = firstArgIsString\n                        ? (0, sql_common_1.addSqlCommenterComment)(span, arg0)\n                        : firstArgIsQueryObjectWithText\n                            ? Object.assign(Object.assign({}, arg0), { text: (0, sql_common_1.addSqlCommenterComment)(span, arg0.text) }) : args[0];\n                }\n                // Bind callback (if any) to parent span (if any)\n                if (args.length > 0) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    if (typeof args[args.length - 1] === 'function') {\n                        // Patch ParameterQuery callback\n                        args[args.length - 1] = utils.patchCallback(instrumentationConfig, span, args[args.length - 1] // nb: not type safe.\n                        );\n                        // If a parent span exists, bind the callback\n                        if (parentSpan) {\n                            args[args.length - 1] = api_1.context.bind(api_1.context.active(), args[args.length - 1]);\n                        }\n                    }\n                    else if (typeof (queryConfig === null || queryConfig === void 0 ? void 0 : queryConfig.callback) === 'function') {\n                        // Patch ConfigQuery callback\n                        let callback = utils.patchCallback(plugin.getConfig(), span, queryConfig.callback // nb: not type safe.\n                        );\n                        // If a parent span existed, bind the callback\n                        if (parentSpan) {\n                            callback = api_1.context.bind(api_1.context.active(), callback);\n                        }\n                        args[0].callback = callback;\n                    }\n                }\n                if (typeof instrumentationConfig.requestHook === 'function' &&\n                    queryConfig) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                        // pick keys to expose explicitly, so we're not leaking pg package\n                        // internals that are subject to change\n                        const { database, host, port, user } = this.connectionParameters;\n                        const connection = { database, host, port, user };\n                        instrumentationConfig.requestHook(span, {\n                            connection,\n                            query: {\n                                text: queryConfig.text,\n                                // nb: if `client.query` is called with illegal arguments\n                                // (e.g., if `queryConfig.values` is passed explicitly, but a\n                                // non-array is given), then the type casts will be wrong. But\n                                // we leave it up to the queryHook to handle that, and we\n                                // catch and swallow any errors it throws. The other options\n                                // are all worse. E.g., we could leave `queryConfig.values`\n                                // and `queryConfig.name` as `unknown`, but then the hook body\n                                // would be forced to validate (or cast) them before using\n                                // them, which seems incredibly cumbersome given that these\n                                // casts will be correct 99.9% of the time -- and pg.query\n                                // will immediately throw during development in the other .1%\n                                // of cases. Alternatively, we could simply skip calling the\n                                // hook when `values` or `name` don't have the expected type,\n                                // but that would add unnecessary validation overhead to every\n                                // hook invocation and possibly be even more confusing/unexpected.\n                                values: queryConfig.values,\n                                name: queryConfig.name,\n                            },\n                        });\n                    }, err => {\n                        if (err) {\n                            plugin._diag.error('Error running query hook', err);\n                        }\n                    }, true);\n                }\n                let result;\n                try {\n                    result = original.apply(this, args);\n                }\n                catch (e) {\n                    // span.recordException(e);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: utils.getErrorMessage(e),\n                    });\n                    span.end();\n                    throw e;\n                }\n                // Bind promise to parent span and end the span\n                if (result instanceof Promise) {\n                    return result\n                        .then((result) => {\n                        // Return a pass-along promise which ends the span and then goes to user's orig resolvers\n                        return new Promise(resolve => {\n                            utils.handleExecutionResult(plugin.getConfig(), span, result);\n                            span.end();\n                            resolve(result);\n                        });\n                    })\n                        .catch((error) => {\n                        return new Promise((_, reject) => {\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message: error.message,\n                            });\n                            span.end();\n                            reject(error);\n                        });\n                    });\n                }\n                // else returns void\n                return result; // void\n            };\n        };\n    }\n    _getPoolConnectPatch() {\n        const plugin = this;\n        return (originalConnect) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return originalConnect.call(this, callback);\n                }\n                // setup span\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.POOL_CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromPool(this.options),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchCallbackPGPool(span, callback);\n                    // If a parent span exists, bind the callback\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return originalConnect.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n}\nexports.PgInstrumentation = PgInstrumentation;\nfunction handleConnectResult(span, connectResult) {\n    if (!(connectResult instanceof Promise)) {\n        return connectResult;\n    }\n    const connectResultPromise = connectResult;\n    return api_1.context.bind(api_1.context.active(), connectResultPromise\n        .then(result => {\n        span.end();\n        return result;\n    })\n        .catch((error) => {\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: utils.getErrorMessage(error),\n        });\n        span.end();\n        return Promise.reject(error);\n    }));\n}\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Postgresql specific attributes not covered by semantic conventions\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"PG_VALUES\"] = \"db.postgresql.values\";\n    AttributeNames[\"PG_PLAN\"] = \"db.postgresql.plan\";\n    AttributeNames[\"IDLE_TIMEOUT_MILLIS\"] = \"db.postgresql.idle.timeout.millis\";\n    AttributeNames[\"MAX_CLIENT\"] = \"db.postgresql.max.client\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanM/MjdkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gUG9zdGdyZXNxbCBzcGVjaWZpYyBhdHRyaWJ1dGVzIG5vdCBjb3ZlcmVkIGJ5IHNlbWFudGljIGNvbnZlbnRpb25zXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJQR19WQUxVRVNcIl0gPSBcImRiLnBvc3RncmVzcWwudmFsdWVzXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJQR19QTEFOXCJdID0gXCJkYi5wb3N0Z3Jlc3FsLnBsYW5cIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIklETEVfVElNRU9VVF9NSUxMSVNcIl0gPSBcImRiLnBvc3RncmVzcWwuaWRsZS50aW1lb3V0Lm1pbGxpc1wiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiTUFYX0NMSUVOVFwiXSA9IFwiZGIucG9zdGdyZXNxbC5tYXguY2xpZW50XCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpanNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Contains span names produced by instrumentation\nvar SpanNames;\n(function (SpanNames) {\n    SpanNames[\"QUERY_PREFIX\"] = \"pg.query\";\n    SpanNames[\"CONNECT\"] = \"pg.connect\";\n    SpanNames[\"POOL_CONNECT\"] = \"pg-pool.connect\";\n})(SpanNames = exports.SpanNames || (exports.SpanNames = {}));\n//# sourceMappingURL=SpanNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2VudW1zL1NwYW5OYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0MsaUJBQWlCLEtBQUs7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy9lbnVtcy9TcGFuTmFtZXMuanM/NWQ1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3Bhbk5hbWVzID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIENvbnRhaW5zIHNwYW4gbmFtZXMgcHJvZHVjZWQgYnkgaW5zdHJ1bWVudGF0aW9uXG52YXIgU3Bhbk5hbWVzO1xuKGZ1bmN0aW9uIChTcGFuTmFtZXMpIHtcbiAgICBTcGFuTmFtZXNbXCJRVUVSWV9QUkVGSVhcIl0gPSBcInBnLnF1ZXJ5XCI7XG4gICAgU3Bhbk5hbWVzW1wiQ09OTkVDVFwiXSA9IFwicGcuY29ubmVjdFwiO1xuICAgIFNwYW5OYW1lc1tcIlBPT0xfQ09OTkVDVFwiXSA9IFwicGctcG9vbC5jb25uZWN0XCI7XG59KShTcGFuTmFtZXMgPSBleHBvcnRzLlNwYW5OYW1lcyB8fCAoZXhwb3J0cy5TcGFuTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Bhbk5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js ***!
  \****************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsME1BQW1CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxzTEFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsb05BQXdCO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvaW5kZXguanM/ZDBkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdHlwZXMuanM/NWVmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isObjectWithTextString = exports.getErrorMessage = exports.patchClientConnectCallback = exports.patchCallbackPGPool = exports.patchCallback = exports.handleExecutionResult = exports.handleConfigQuery = exports.shouldSkipInstrumentation = exports.getSemanticAttributesFromPool = exports.getSemanticAttributesFromConnection = exports.getConnectionString = exports.getQuerySpanName = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\n/**\n * Helper function to get a low cardinality span name from whatever info we have\n * about the query.\n *\n * This is tricky, because we don't have most of the information (table name,\n * operation name, etc) the spec recommends using to build a low-cardinality\n * value w/o parsing. So, we use db.name and assume that, if the query's a named\n * prepared statement, those `name` values will be low cardinality. If we don't\n * have a named prepared statement, we try to parse an operation (despite the\n * spec's warnings).\n *\n * @params dbName The name of the db against which this query is being issued,\n *   which could be missing if no db name was given at the time that the\n *   connection was established.\n * @params queryConfig Information we have about the query being issued, typed\n *   to reflect only the validation we've actually done on the args to\n *   `client.query()`. This will be undefined if `client.query()` was called\n *   with invalid arguments.\n */\nfunction getQuerySpanName(dbName, queryConfig) {\n    // NB: when the query config is invalid, we omit the dbName too, so that\n    // someone (or some tool) reading the span name doesn't misinterpret the\n    // dbName as being a prepared statement or sql commit name.\n    if (!queryConfig)\n        return SpanNames_1.SpanNames.QUERY_PREFIX;\n    // Either the name of a prepared statement; or an attempted parse\n    // of the SQL command, normalized to uppercase; or unknown.\n    const command = typeof queryConfig.name === 'string' && queryConfig.name\n        ? queryConfig.name\n        : parseNormalizedOperationName(queryConfig.text);\n    return `${SpanNames_1.SpanNames.QUERY_PREFIX}:${command}${dbName ? ` ${dbName}` : ''}`;\n}\nexports.getQuerySpanName = getQuerySpanName;\nfunction parseNormalizedOperationName(queryText) {\n    const indexOfFirstSpace = queryText.indexOf(' ');\n    let sqlCommand = indexOfFirstSpace === -1\n        ? queryText\n        : queryText.slice(0, indexOfFirstSpace);\n    sqlCommand = sqlCommand.toUpperCase();\n    // Handle query text being \"COMMIT;\", which has an extra semicolon before the space.\n    return sqlCommand.endsWith(';') ? sqlCommand.slice(0, -1) : sqlCommand;\n}\nfunction getConnectionString(params) {\n    const host = params.host || 'localhost';\n    const port = params.port || 5432;\n    const database = params.database || '';\n    return `postgresql://${host}:${port}/${database}`;\n}\nexports.getConnectionString = getConnectionString;\nfunction getPort(port) {\n    // Port may be NaN as parseInt() is used on the value, passing null will result in NaN being parsed.\n    // https://github.com/brianc/node-postgres/blob/2a8efbee09a284be12748ed3962bc9b816965e36/packages/pg/lib/connection-parameters.js#L66\n    if (Number.isInteger(port)) {\n        return port;\n    }\n    // Unable to find the default used in pg code, so falling back to 'undefined'.\n    return undefined;\n}\nfunction getSemanticAttributesFromConnection(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n    };\n}\nexports.getSemanticAttributesFromConnection = getSemanticAttributesFromConnection;\nfunction getSemanticAttributesFromPool(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n        [AttributeNames_1.AttributeNames.IDLE_TIMEOUT_MILLIS]: params.idleTimeoutMillis,\n        [AttributeNames_1.AttributeNames.MAX_CLIENT]: params.maxClient,\n    };\n}\nexports.getSemanticAttributesFromPool = getSemanticAttributesFromPool;\nfunction shouldSkipInstrumentation(instrumentationConfig) {\n    return (instrumentationConfig.requireParentSpan === true &&\n        api_1.trace.getSpan(api_1.context.active()) === undefined);\n}\nexports.shouldSkipInstrumentation = shouldSkipInstrumentation;\n// Create a span from our normalized queryConfig object,\n// or return a basic span if no queryConfig was given/could be created.\nfunction handleConfigQuery(tracer, instrumentationConfig, queryConfig) {\n    // Create child span.\n    const { connectionParameters } = this;\n    const dbName = connectionParameters.database;\n    const spanName = getQuerySpanName(dbName, queryConfig);\n    const span = tracer.startSpan(spanName, {\n        kind: api_1.SpanKind.CLIENT,\n        attributes: getSemanticAttributesFromConnection(connectionParameters),\n    });\n    if (!queryConfig) {\n        return span;\n    }\n    // Set attributes\n    if (queryConfig.text) {\n        span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, queryConfig.text);\n    }\n    if (instrumentationConfig.enhancedDatabaseReporting &&\n        Array.isArray(queryConfig.values)) {\n        try {\n            const convertedValues = queryConfig.values.map(value => {\n                if (value == null) {\n                    return 'null';\n                }\n                else if (value instanceof Buffer) {\n                    return value.toString();\n                }\n                else if (typeof value === 'object') {\n                    if (typeof value.toPostgres === 'function') {\n                        return value.toPostgres();\n                    }\n                    return JSON.stringify(value);\n                }\n                else {\n                    //string, number\n                    return value.toString();\n                }\n            });\n            span.setAttribute(AttributeNames_1.AttributeNames.PG_VALUES, convertedValues);\n        }\n        catch (e) {\n            api_1.diag.error('failed to stringify ', queryConfig.values, e);\n        }\n    }\n    // Set plan name attribute, if present\n    if (typeof queryConfig.name === 'string') {\n        span.setAttribute(AttributeNames_1.AttributeNames.PG_PLAN, queryConfig.name);\n    }\n    return span;\n}\nexports.handleConfigQuery = handleConfigQuery;\nfunction handleExecutionResult(config, span, pgResult) {\n    if (typeof config.responseHook === 'function') {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            config.responseHook(span, {\n                data: pgResult,\n            });\n        }, err => {\n            if (err) {\n                api_1.diag.error('Error running response hook', err);\n            }\n        }, true);\n    }\n}\nexports.handleExecutionResult = handleExecutionResult;\nfunction patchCallback(instrumentationConfig, span, cb) {\n    return function patchedCallback(err, res) {\n        if (err) {\n            // span.recordException(err);\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        else {\n            handleExecutionResult(instrumentationConfig, span, res);\n        }\n        span.end();\n        cb.call(this, err, res);\n    };\n}\nexports.patchCallback = patchCallback;\nfunction patchCallbackPGPool(span, cb) {\n    return function patchedCallback(err, res, done) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.call(this, err, res, done);\n    };\n}\nexports.patchCallbackPGPool = patchCallbackPGPool;\nfunction patchClientConnectCallback(span, cb) {\n    return function patchedClientConnectCallback(err) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.apply(this, arguments);\n    };\n}\nexports.patchClientConnectCallback = patchClientConnectCallback;\n/**\n * Attempt to get a message string from a thrown value, while being quite\n * defensive, to recognize the fact that, in JS, any kind of value (even\n * primitives) can be thrown.\n */\nfunction getErrorMessage(e) {\n    return typeof e === 'object' && e !== null && 'message' in e\n        ? String(e.message)\n        : undefined;\n}\nexports.getErrorMessage = getErrorMessage;\nfunction isObjectWithTextString(it) {\n    var _a;\n    return (typeof it === 'object' &&\n        typeof ((_a = it) === null || _a === void 0 ? void 0 : _a.text) === 'string');\n}\nexports.isObjectWithTextString = isObjectWithTextString;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.43.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-pg';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzlDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL3ZlcnNpb24uanM/ZTVjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjQzLjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _sentryCollisionFreeGlobalObject = typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : {};\n_sentryCollisionFreeGlobalObject[\"__sentryRewritesTunnelPath__\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"SENTRY_RELEASE\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__sentryBasePath\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__rewriteFramesDistDir__\"] = \".next\";\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PgInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\");\nconst sql_common_1 = __webpack_require__(/*! @opentelemetry/sql-common */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+sql-common@0.40.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/build/src/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\nclass PgInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        const modulePG = new instrumentation_1.InstrumentationNodeModuleDefinition('pg', ['>=8.0.0 <9'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.query)) {\n                this._unwrap(moduleExports.Client.prototype, 'query');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.connect)) {\n                this._unwrap(moduleExports.Client.prototype, 'connect');\n            }\n            this._wrap(moduleExports.Client.prototype, 'query', this._getClientQueryPatch());\n            this._wrap(moduleExports.Client.prototype, 'connect', this._getClientConnectPatch());\n            return module;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.query)) {\n                this._unwrap(moduleExports.Client.prototype, 'query');\n            }\n        });\n        const modulePGPool = new instrumentation_1.InstrumentationNodeModuleDefinition('pg-pool', ['>=2.0.0 <4'], (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n            this._wrap(moduleExports.prototype, 'connect', this._getPoolConnectPatch());\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n        });\n        return [modulePG, modulePGPool];\n    }\n    setConfig(config = {}) {\n        this._config = Object.assign({}, config);\n    }\n    getConfig() {\n        return this._config;\n    }\n    _getClientConnectPatch() {\n        const plugin = this;\n        return (original) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.call(this, callback);\n                }\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromConnection(this),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchClientConnectCallback(span, callback);\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n    _getClientQueryPatch() {\n        const plugin = this;\n        return (original) => {\n            this._diag.debug('Patching pg.Client.prototype.query');\n            return function query(...args) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.apply(this, args);\n                }\n                // client.query(text, cb?), client.query(text, values, cb?), and\n                // client.query(configObj, cb?) are all valid signatures. We construct\n                // a queryConfig obj from all (valid) signatures to build the span in a\n                // unified way. We verify that we at least have query text, and code\n                // defensively when dealing with `queryConfig` after that (to handle all\n                // the other invalid cases, like a non-array for values being provided).\n                // The type casts here reflect only what we've actually validated.\n                const arg0 = args[0];\n                const firstArgIsString = typeof arg0 === 'string';\n                const firstArgIsQueryObjectWithText = utils.isObjectWithTextString(arg0);\n                // TODO: remove the `as ...` casts below when the TS version is upgraded.\n                // Newer TS versions will use the result of firstArgIsQueryObjectWithText\n                // to properly narrow arg0, but TS 4.3.5 does not.\n                const queryConfig = firstArgIsString\n                    ? {\n                        text: arg0,\n                        values: Array.isArray(args[1]) ? args[1] : undefined,\n                    }\n                    : firstArgIsQueryObjectWithText\n                        ? arg0\n                        : undefined;\n                const instrumentationConfig = plugin.getConfig();\n                const span = utils.handleConfigQuery.call(this, plugin.tracer, instrumentationConfig, queryConfig);\n                // Modify query text w/ a tracing comment before invoking original for\n                // tracing, but only if args[0] has one of our expected shapes.\n                if (instrumentationConfig.addSqlCommenterCommentToQueries) {\n                    args[0] = firstArgIsString\n                        ? (0, sql_common_1.addSqlCommenterComment)(span, arg0)\n                        : firstArgIsQueryObjectWithText\n                            ? Object.assign(Object.assign({}, arg0), { text: (0, sql_common_1.addSqlCommenterComment)(span, arg0.text) }) : args[0];\n                }\n                // Bind callback (if any) to parent span (if any)\n                if (args.length > 0) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    if (typeof args[args.length - 1] === 'function') {\n                        // Patch ParameterQuery callback\n                        args[args.length - 1] = utils.patchCallback(instrumentationConfig, span, args[args.length - 1] // nb: not type safe.\n                        );\n                        // If a parent span exists, bind the callback\n                        if (parentSpan) {\n                            args[args.length - 1] = api_1.context.bind(api_1.context.active(), args[args.length - 1]);\n                        }\n                    }\n                    else if (typeof (queryConfig === null || queryConfig === void 0 ? void 0 : queryConfig.callback) === 'function') {\n                        // Patch ConfigQuery callback\n                        let callback = utils.patchCallback(plugin.getConfig(), span, queryConfig.callback // nb: not type safe.\n                        );\n                        // If a parent span existed, bind the callback\n                        if (parentSpan) {\n                            callback = api_1.context.bind(api_1.context.active(), callback);\n                        }\n                        args[0].callback = callback;\n                    }\n                }\n                if (typeof instrumentationConfig.requestHook === 'function' &&\n                    queryConfig) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                        // pick keys to expose explicitly, so we're not leaking pg package\n                        // internals that are subject to change\n                        const { database, host, port, user } = this.connectionParameters;\n                        const connection = { database, host, port, user };\n                        instrumentationConfig.requestHook(span, {\n                            connection,\n                            query: {\n                                text: queryConfig.text,\n                                // nb: if `client.query` is called with illegal arguments\n                                // (e.g., if `queryConfig.values` is passed explicitly, but a\n                                // non-array is given), then the type casts will be wrong. But\n                                // we leave it up to the queryHook to handle that, and we\n                                // catch and swallow any errors it throws. The other options\n                                // are all worse. E.g., we could leave `queryConfig.values`\n                                // and `queryConfig.name` as `unknown`, but then the hook body\n                                // would be forced to validate (or cast) them before using\n                                // them, which seems incredibly cumbersome given that these\n                                // casts will be correct 99.9% of the time -- and pg.query\n                                // will immediately throw during development in the other .1%\n                                // of cases. Alternatively, we could simply skip calling the\n                                // hook when `values` or `name` don't have the expected type,\n                                // but that would add unnecessary validation overhead to every\n                                // hook invocation and possibly be even more confusing/unexpected.\n                                values: queryConfig.values,\n                                name: queryConfig.name,\n                            },\n                        });\n                    }, err => {\n                        if (err) {\n                            plugin._diag.error('Error running query hook', err);\n                        }\n                    }, true);\n                }\n                let result;\n                try {\n                    result = original.apply(this, args);\n                }\n                catch (e) {\n                    // span.recordException(e);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: utils.getErrorMessage(e),\n                    });\n                    span.end();\n                    throw e;\n                }\n                // Bind promise to parent span and end the span\n                if (result instanceof Promise) {\n                    return result\n                        .then((result) => {\n                        // Return a pass-along promise which ends the span and then goes to user's orig resolvers\n                        return new Promise(resolve => {\n                            utils.handleExecutionResult(plugin.getConfig(), span, result);\n                            span.end();\n                            resolve(result);\n                        });\n                    })\n                        .catch((error) => {\n                        return new Promise((_, reject) => {\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message: error.message,\n                            });\n                            span.end();\n                            reject(error);\n                        });\n                    });\n                }\n                // else returns void\n                return result; // void\n            };\n        };\n    }\n    _getPoolConnectPatch() {\n        const plugin = this;\n        return (originalConnect) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return originalConnect.call(this, callback);\n                }\n                // setup span\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.POOL_CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromPool(this.options),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchCallbackPGPool(span, callback);\n                    // If a parent span exists, bind the callback\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return originalConnect.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n}\nexports.PgInstrumentation = PgInstrumentation;\nfunction handleConnectResult(span, connectResult) {\n    if (!(connectResult instanceof Promise)) {\n        return connectResult;\n    }\n    const connectResultPromise = connectResult;\n    return api_1.context.bind(api_1.context.active(), connectResultPromise\n        .then(result => {\n        span.end();\n        return result;\n    })\n        .catch((error) => {\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: utils.getErrorMessage(error),\n        });\n        span.end();\n        return Promise.reject(error);\n    }));\n}\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Postgresql specific attributes not covered by semantic conventions\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"PG_VALUES\"] = \"db.postgresql.values\";\n    AttributeNames[\"PG_PLAN\"] = \"db.postgresql.plan\";\n    AttributeNames[\"IDLE_TIMEOUT_MILLIS\"] = \"db.postgresql.idle.timeout.millis\";\n    AttributeNames[\"MAX_CLIENT\"] = \"db.postgresql.max.client\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcz9lODNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBQb3N0Z3Jlc3FsIHNwZWNpZmljIGF0dHJpYnV0ZXMgbm90IGNvdmVyZWQgYnkgc2VtYW50aWMgY29udmVudGlvbnNcbnZhciBBdHRyaWJ1dGVOYW1lcztcbihmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBHX1ZBTFVFU1wiXSA9IFwiZGIucG9zdGdyZXNxbC52YWx1ZXNcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBHX1BMQU5cIl0gPSBcImRiLnBvc3RncmVzcWwucGxhblwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSURMRV9USU1FT1VUX01JTExJU1wiXSA9IFwiZGIucG9zdGdyZXNxbC5pZGxlLnRpbWVvdXQubWlsbGlzXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJNQVhfQ0xJRU5UXCJdID0gXCJkYi5wb3N0Z3Jlc3FsLm1heC5jbGllbnRcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpanNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Contains span names produced by instrumentation\nvar SpanNames;\n(function (SpanNames) {\n    SpanNames[\"QUERY_PREFIX\"] = \"pg.query\";\n    SpanNames[\"CONNECT\"] = \"pg.connect\";\n    SpanNames[\"POOL_CONNECT\"] = \"pg-pool.connect\";\n})(SpanNames = exports.SpanNames || (exports.SpanNames = {}));\n//# sourceMappingURL=SpanNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvZW51bXMvU3Bhbk5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQyxpQkFBaUIsS0FBSztBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1wZ0AwLjQzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcvYnVpbGQvc3JjL2VudW1zL1NwYW5OYW1lcy5qcz8yYTJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TcGFuTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gQ29udGFpbnMgc3BhbiBuYW1lcyBwcm9kdWNlZCBieSBpbnN0cnVtZW50YXRpb25cbnZhciBTcGFuTmFtZXM7XG4oZnVuY3Rpb24gKFNwYW5OYW1lcykge1xuICAgIFNwYW5OYW1lc1tcIlFVRVJZX1BSRUZJWFwiXSA9IFwicGcucXVlcnlcIjtcbiAgICBTcGFuTmFtZXNbXCJDT05ORUNUXCJdID0gXCJwZy5jb25uZWN0XCI7XG4gICAgU3Bhbk5hbWVzW1wiUE9PTF9DT05ORUNUXCJdID0gXCJwZy1wb29sLmNvbm5lY3RcIjtcbn0pKFNwYW5OYW1lcyA9IGV4cG9ydHMuU3Bhbk5hbWVzIHx8IChleHBvcnRzLlNwYW5OYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGFuTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js ***!
  \****************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxtTUFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLCtLQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyw2TUFBd0I7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy9pbmRleC5qcz9kODg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tcHJvamVjdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcGdAMC40My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnL2J1aWxkL3NyYy90eXBlcy5qcz81NmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isObjectWithTextString = exports.getErrorMessage = exports.patchClientConnectCallback = exports.patchCallbackPGPool = exports.patchCallback = exports.handleExecutionResult = exports.handleConfigQuery = exports.shouldSkipInstrumentation = exports.getSemanticAttributesFromPool = exports.getSemanticAttributesFromConnection = exports.getConnectionString = exports.getQuerySpanName = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/AttributeNames.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\n/**\n * Helper function to get a low cardinality span name from whatever info we have\n * about the query.\n *\n * This is tricky, because we don't have most of the information (table name,\n * operation name, etc) the spec recommends using to build a low-cardinality\n * value w/o parsing. So, we use db.name and assume that, if the query's a named\n * prepared statement, those `name` values will be low cardinality. If we don't\n * have a named prepared statement, we try to parse an operation (despite the\n * spec's warnings).\n *\n * @params dbName The name of the db against which this query is being issued,\n *   which could be missing if no db name was given at the time that the\n *   connection was established.\n * @params queryConfig Information we have about the query being issued, typed\n *   to reflect only the validation we've actually done on the args to\n *   `client.query()`. This will be undefined if `client.query()` was called\n *   with invalid arguments.\n */\nfunction getQuerySpanName(dbName, queryConfig) {\n    // NB: when the query config is invalid, we omit the dbName too, so that\n    // someone (or some tool) reading the span name doesn't misinterpret the\n    // dbName as being a prepared statement or sql commit name.\n    if (!queryConfig)\n        return SpanNames_1.SpanNames.QUERY_PREFIX;\n    // Either the name of a prepared statement; or an attempted parse\n    // of the SQL command, normalized to uppercase; or unknown.\n    const command = typeof queryConfig.name === 'string' && queryConfig.name\n        ? queryConfig.name\n        : parseNormalizedOperationName(queryConfig.text);\n    return `${SpanNames_1.SpanNames.QUERY_PREFIX}:${command}${dbName ? ` ${dbName}` : ''}`;\n}\nexports.getQuerySpanName = getQuerySpanName;\nfunction parseNormalizedOperationName(queryText) {\n    const indexOfFirstSpace = queryText.indexOf(' ');\n    let sqlCommand = indexOfFirstSpace === -1\n        ? queryText\n        : queryText.slice(0, indexOfFirstSpace);\n    sqlCommand = sqlCommand.toUpperCase();\n    // Handle query text being \"COMMIT;\", which has an extra semicolon before the space.\n    return sqlCommand.endsWith(';') ? sqlCommand.slice(0, -1) : sqlCommand;\n}\nfunction getConnectionString(params) {\n    const host = params.host || 'localhost';\n    const port = params.port || 5432;\n    const database = params.database || '';\n    return `postgresql://${host}:${port}/${database}`;\n}\nexports.getConnectionString = getConnectionString;\nfunction getPort(port) {\n    // Port may be NaN as parseInt() is used on the value, passing null will result in NaN being parsed.\n    // https://github.com/brianc/node-postgres/blob/2a8efbee09a284be12748ed3962bc9b816965e36/packages/pg/lib/connection-parameters.js#L66\n    if (Number.isInteger(port)) {\n        return port;\n    }\n    // Unable to find the default used in pg code, so falling back to 'undefined'.\n    return undefined;\n}\nfunction getSemanticAttributesFromConnection(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n    };\n}\nexports.getSemanticAttributesFromConnection = getSemanticAttributesFromConnection;\nfunction getSemanticAttributesFromPool(params) {\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_POSTGRESQL,\n        [semantic_conventions_1.SEMATTRS_DB_NAME]: params.database,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params),\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: params.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n        [semantic_conventions_1.SEMATTRS_DB_USER]: params.user,\n        [AttributeNames_1.AttributeNames.IDLE_TIMEOUT_MILLIS]: params.idleTimeoutMillis,\n        [AttributeNames_1.AttributeNames.MAX_CLIENT]: params.maxClient,\n    };\n}\nexports.getSemanticAttributesFromPool = getSemanticAttributesFromPool;\nfunction shouldSkipInstrumentation(instrumentationConfig) {\n    return (instrumentationConfig.requireParentSpan === true &&\n        api_1.trace.getSpan(api_1.context.active()) === undefined);\n}\nexports.shouldSkipInstrumentation = shouldSkipInstrumentation;\n// Create a span from our normalized queryConfig object,\n// or return a basic span if no queryConfig was given/could be created.\nfunction handleConfigQuery(tracer, instrumentationConfig, queryConfig) {\n    // Create child span.\n    const { connectionParameters } = this;\n    const dbName = connectionParameters.database;\n    const spanName = getQuerySpanName(dbName, queryConfig);\n    const span = tracer.startSpan(spanName, {\n        kind: api_1.SpanKind.CLIENT,\n        attributes: getSemanticAttributesFromConnection(connectionParameters),\n    });\n    if (!queryConfig) {\n        return span;\n    }\n    // Set attributes\n    if (queryConfig.text) {\n        span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, queryConfig.text);\n    }\n    if (instrumentationConfig.enhancedDatabaseReporting &&\n        Array.isArray(queryConfig.values)) {\n        try {\n            const convertedValues = queryConfig.values.map(value => {\n                if (value == null) {\n                    return 'null';\n                }\n                else if (value instanceof Buffer) {\n                    return value.toString();\n                }\n                else if (typeof value === 'object') {\n                    if (typeof value.toPostgres === 'function') {\n                        return value.toPostgres();\n                    }\n                    return JSON.stringify(value);\n                }\n                else {\n                    //string, number\n                    return value.toString();\n                }\n            });\n            span.setAttribute(AttributeNames_1.AttributeNames.PG_VALUES, convertedValues);\n        }\n        catch (e) {\n            api_1.diag.error('failed to stringify ', queryConfig.values, e);\n        }\n    }\n    // Set plan name attribute, if present\n    if (typeof queryConfig.name === 'string') {\n        span.setAttribute(AttributeNames_1.AttributeNames.PG_PLAN, queryConfig.name);\n    }\n    return span;\n}\nexports.handleConfigQuery = handleConfigQuery;\nfunction handleExecutionResult(config, span, pgResult) {\n    if (typeof config.responseHook === 'function') {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            config.responseHook(span, {\n                data: pgResult,\n            });\n        }, err => {\n            if (err) {\n                api_1.diag.error('Error running response hook', err);\n            }\n        }, true);\n    }\n}\nexports.handleExecutionResult = handleExecutionResult;\nfunction patchCallback(instrumentationConfig, span, cb) {\n    return function patchedCallback(err, res) {\n        if (err) {\n            // span.recordException(err);\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        else {\n            handleExecutionResult(instrumentationConfig, span, res);\n        }\n        span.end();\n        cb.call(this, err, res);\n    };\n}\nexports.patchCallback = patchCallback;\nfunction patchCallbackPGPool(span, cb) {\n    return function patchedCallback(err, res, done) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.call(this, err, res, done);\n    };\n}\nexports.patchCallbackPGPool = patchCallbackPGPool;\nfunction patchClientConnectCallback(span, cb) {\n    return function patchedClientConnectCallback(err) {\n        if (err) {\n            span.setStatus({\n                code: api_1.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        }\n        span.end();\n        cb.apply(this, arguments);\n    };\n}\nexports.patchClientConnectCallback = patchClientConnectCallback;\n/**\n * Attempt to get a message string from a thrown value, while being quite\n * defensive, to recognize the fact that, in JS, any kind of value (even\n * primitives) can be thrown.\n */\nfunction getErrorMessage(e) {\n    return typeof e === 'object' && e !== null && 'message' in e\n        ? String(e.message)\n        : undefined;\n}\nexports.getErrorMessage = getErrorMessage;\nfunction isObjectWithTextString(it) {\n    var _a;\n    return (typeof it === 'object' &&\n        typeof ((_a = it) === null || _a === void 0 ? void 0 : _a.text) === 'string');\n}\nexports.isObjectWithTextString = isObjectWithTextString;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.43.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-pg';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXBnQDAuNDMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZy9idWlsZC9zcmMvdmVyc2lvbi5qcz8xZWIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNDMuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _sentryCollisionFreeGlobalObject = typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : {};\n_sentryCollisionFreeGlobalObject[\"__sentryRewritesTunnelPath__\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"SENTRY_RELEASE\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__sentryBasePath\"] = undefined;\n_sentryCollisionFreeGlobalObject[\"__rewriteFramesDistDir__\"] = \".next\";\n\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PgInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/utils.js\");\nconst sql_common_1 = __webpack_require__(/*! @opentelemetry/sql-common */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sql-common@0.40.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/build/src/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/version.js\");\nconst SpanNames_1 = __webpack_require__(/*! ./enums/SpanNames */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/enums/SpanNames.js\");\nclass PgInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        const modulePG = new instrumentation_1.InstrumentationNodeModuleDefinition('pg', ['>=8.0.0 <9'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.query)) {\n                this._unwrap(moduleExports.Client.prototype, 'query');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.connect)) {\n                this._unwrap(moduleExports.Client.prototype, 'connect');\n            }\n            this._wrap(moduleExports.Client.prototype, 'query', this._getClientQueryPatch());\n            this._wrap(moduleExports.Client.prototype, 'connect', this._getClientConnectPatch());\n            return module;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module'\n                ? module.default // ESM\n                : module; // CommonJS\n            if ((0, instrumentation_1.isWrapped)(moduleExports.Client.prototype.query)) {\n                this._unwrap(moduleExports.Client.prototype, 'query');\n            }\n        });\n        const modulePGPool = new instrumentation_1.InstrumentationNodeModuleDefinition('pg-pool', ['>=2.0.0 <4'], (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n            this._wrap(moduleExports.prototype, 'connect', this._getPoolConnectPatch());\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports.prototype.connect)) {\n                this._unwrap(moduleExports.prototype, 'connect');\n            }\n        });\n        return [modulePG, modulePGPool];\n    }\n    setConfig(config = {}) {\n        this._config = Object.assign({}, config);\n    }\n    getConfig() {\n        return this._config;\n    }\n    _getClientConnectPatch() {\n        const plugin = this;\n        return (original) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.call(this, callback);\n                }\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromConnection(this),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchClientConnectCallback(span, callback);\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n    _getClientQueryPatch() {\n        const plugin = this;\n        return (original) => {\n            this._diag.debug('Patching pg.Client.prototype.query');\n            return function query(...args) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return original.apply(this, args);\n                }\n                // client.query(text, cb?), client.query(text, values, cb?), and\n                // client.query(configObj, cb?) are all valid signatures. We construct\n                // a queryConfig obj from all (valid) signatures to build the span in a\n                // unified way. We verify that we at least have query text, and code\n                // defensively when dealing with `queryConfig` after that (to handle all\n                // the other invalid cases, like a non-array for values being provided).\n                // The type casts here reflect only what we've actually validated.\n                const arg0 = args[0];\n                const firstArgIsString = typeof arg0 === 'string';\n                const firstArgIsQueryObjectWithText = utils.isObjectWithTextString(arg0);\n                // TODO: remove the `as ...` casts below when the TS version is upgraded.\n                // Newer TS versions will use the result of firstArgIsQueryObjectWithText\n                // to properly narrow arg0, but TS 4.3.5 does not.\n                const queryConfig = firstArgIsString\n                    ? {\n                        text: arg0,\n                        values: Array.isArray(args[1]) ? args[1] : undefined,\n                    }\n                    : firstArgIsQueryObjectWithText\n                        ? arg0\n                        : undefined;\n                const instrumentationConfig = plugin.getConfig();\n                const span = utils.handleConfigQuery.call(this, plugin.tracer, instrumentationConfig, queryConfig);\n                // Modify query text w/ a tracing comment before invoking original for\n                // tracing, but only if args[0] has one of our expected shapes.\n                if (instrumentationConfig.addSqlCommenterCommentToQueries) {\n                    args[0] = firstArgIsString\n                        ? (0, sql_common_1.addSqlCommenterComment)(span, arg0)\n                        : firstArgIsQueryObjectWithText\n                            ? Object.assign(Object.assign({}, arg0), { text: (0, sql_common_1.addSqlCommenterComment)(span, arg0.text) }) : args[0];\n                }\n                // Bind callback (if any) to parent span (if any)\n                if (args.length > 0) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    if (typeof args[args.length - 1] === 'function') {\n                        // Patch ParameterQuery callback\n                        args[args.length - 1] = utils.patchCallback(instrumentationConfig, span, args[args.length - 1] // nb: not type safe.\n                        );\n                        // If a parent span exists, bind the callback\n                        if (parentSpan) {\n                            args[args.length - 1] = api_1.context.bind(api_1.context.active(), args[args.length - 1]);\n                        }\n                    }\n                    else if (typeof (queryConfig === null || queryConfig === void 0 ? void 0 : queryConfig.callback) === 'function') {\n                        // Patch ConfigQuery callback\n                        let callback = utils.patchCallback(plugin.getConfig(), span, queryConfig.callback // nb: not type safe.\n                        );\n                        // If a parent span existed, bind the callback\n                        if (parentSpan) {\n                            callback = api_1.context.bind(api_1.context.active(), callback);\n                        }\n                        args[0].callback = callback;\n                    }\n                }\n                if (typeof instrumentationConfig.requestHook === 'function' &&\n                    queryConfig) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                        // pick keys to expose explicitly, so we're not leaking pg package\n                        // internals that are subject to change\n                        const { database, host, port, user } = this.connectionParameters;\n                        const connection = { database, host, port, user };\n                        instrumentationConfig.requestHook(span, {\n                            connection,\n                            query: {\n                                text: queryConfig.text,\n                                // nb: if `client.query` is called with illegal arguments\n                                // (e.g., if `queryConfig.values` is passed explicitly, but a\n                                // non-array is given), then the type casts will be wrong. But\n                                // we leave it up to the queryHook to handle that, and we\n                                // catch and swallow any errors it throws. The other options\n                                // are all worse. E.g., we could leave `queryConfig.values`\n                                // and `queryConfig.name` as `unknown`, but then the hook body\n                                // would be forced to validate (or cast) them before using\n                                // them, which seems incredibly cumbersome given that these\n                                // casts will be correct 99.9% of the time -- and pg.query\n                                // will immediately throw during development in the other .1%\n                                // of cases. Alternatively, we could simply skip calling the\n                                // hook when `values` or `name` don't have the expected type,\n                                // but that would add unnecessary validation overhead to every\n                                // hook invocation and possibly be even more confusing/unexpected.\n                                values: queryConfig.values,\n                                name: queryConfig.name,\n                            },\n                        });\n                    }, err => {\n                        if (err) {\n                            plugin._diag.error('Error running query hook', err);\n                        }\n                    }, true);\n                }\n                let result;\n                try {\n                    result = original.apply(this, args);\n                }\n                catch (e) {\n                    // span.recordException(e);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: utils.getErrorMessage(e),\n                    });\n                    span.end();\n                    throw e;\n                }\n                // Bind promise to parent span and end the span\n                if (result instanceof Promise) {\n                    return result\n                        .then((result) => {\n                        // Return a pass-along promise which ends the span and then goes to user's orig resolvers\n                        return new Promise(resolve => {\n                            utils.handleExecutionResult(plugin.getConfig(), span, result);\n                            span.end();\n                            resolve(result);\n                        });\n                    })\n                        .catch((error) => {\n                        return new Promise((_, reject) => {\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message: error.message,\n                            });\n                            span.end();\n                            reject(error);\n                        });\n                    });\n                }\n                // else returns void\n                return result; // void\n            };\n        };\n    }\n    _getPoolConnectPatch() {\n        const plugin = this;\n        return (originalConnect) => {\n            return function connect(callback) {\n                if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n                    return originalConnect.call(this, callback);\n                }\n                // setup span\n                const span = plugin.tracer.startSpan(SpanNames_1.SpanNames.POOL_CONNECT, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes: utils.getSemanticAttributesFromPool(this.options),\n                });\n                if (callback) {\n                    const parentSpan = api_1.trace.getSpan(api_1.context.active());\n                    callback = utils.patchCallbackPGPool(span, callback);\n                    // If a parent span exists, bind the callback\n                    if (parentSpan) {\n                        callback = api_1.context.bind(api_1.context.active(), callback);\n                    }\n                }\n                const connectResult = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return originalConnect.call(this, callback);\n                });\n                return handleConnectResult(span, connectResult);\n            };\n        };\n    }\n}\nexports.PgInstrumentation = PgInstrumentation;\nfunction handleConnectResult(span, connectResult) {\n    if (!(connectResult instanceof Promise)) {\n        return connectResult;\n    }\n    const connectResultPromise = connectResult;\n    return api_1.context.bind(api_1.context.active(), connectResultPromise\n        .then(result => {\n        span.end();\n        return result;\n    })\n        .catch((error) => {\n        span.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: utils.getErrorMessage(error),\n        });\n        span.end();\n        return Promise.reject(error);\n    }));\n}\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/instrumentation.js\n");

/***/ })

};
;